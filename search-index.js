var searchIndex = JSON.parse('{\
"bench":{"doc":"","t":[5,14],"n":["main","time"],"q":["bench",""],"d":["",""],"i":[0,0],"f":[[[]],null],"p":[]},\
"build_leduc":{"doc":"","t":[0,5,3,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,11,5,12,11,11,11,11],"n":["leduc","main","RuleBuilder","action_id","borrow","borrow_mut","build","deal_hole_cards","default","deref","deref_mut","dfs","drop","from","info_set_size","init","initialize","into","legal_actions","node_size","obs_to_info_set_id","observation","open_flop_card","ready_to_next_phase","rule","rule","terminal_val","try_from","try_into","type_id"],"q":["build_leduc","","build_leduc::leduc","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","Get <code>Rule</code> of Leduc Hold’em","","","","",""],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1],"f":[null,[[]],null,null,[[]],[[]],[[]],[[],["vec",3]],[[],["rulebuilder",3]],[[["usize",15]]],[[["usize",15]]],[[["i32",15],["btreemap",3],["btreemap",3],["vec",3],["option",4,["char"]],["char",15]],["nodeid",3]],[[["usize",15]]],[[]],null,[[],["usize",15]],[[]],[[]],[[["btreemap",3],["vec",3]]],null,null,[[["btreemap",3],["player",4],["vec",3]],["string",3]],[[["btreemap",3]],["vec",3]],[[["vec",3]],["bool",15]],[[],["rule",3]],null,[[["i32",15],["btreemap",3],["btreemap",3],["vec",3],["option",4,["char"]],["char",15]],[["option",4,["f64"]],["f64",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"RuleBuilder"]]},\
"cfr_rs":{"doc":"A rust implementation of Counterfacutual Regret …","t":[0,0,0,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,6,3,4,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,11,11,11,11,11,11,11,11,11,5,5,12,12,12,11,11,12,12,12,11,12,11,11,11,5,5,5,6,5,5,5,5,5],"n":["action","cfr","node","player","rule","solver","strategy","Action","ActionId","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","fmt","fmt","from","from","init","init","into","into","ne","ne","new","new","partial_cmp","partial_cmp","serialize","serialize","to_owned","to_owned","to_str","try_from","try_from","try_into","try_into","type_id","type_id","calc_nash_strt","InformationSet","InformationSetId","Node","NodeId","NonTerminal","Terminal","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","edges","eq","eq","fmt","fmt","from","from","from","init","init","init","into","into","into","ne","ne","new","new","partial_cmp","partial_cmp","player","serialize","serialize","serialize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","edges","player","value","C","P1","P2","Player","borrow","borrow_mut","clone","clone_into","cmp","deref","deref_mut","deserialize","drop","eq","fmt","from","init","into","opponent","partial_cmp","serialize","sign","to_owned","try_from","try_into","type_id","Rule","actions","actions_at_info_set","borrow","borrow_mut","build","default","deref","deref_mut","deserialize","drop","from","from_json","from_path","info_set_details","info_set_including_node","info_sets","init","into","nodes","player_at_info_set","root","serialize","transition","try_from","try_into","type_id","calc_best_resp","calc_ev","calc_nash_conv","Strategy","from_json","from_path","new","to_string","uniform"],"q":["cfr_rs","","","","","","","cfr_rs::action","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cfr_rs::cfr","cfr_rs::node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cfr_rs::node::Node","","","cfr_rs::player","","","","","","","","","","","","","","","","","","","","","","","","","","cfr_rs::rule","","","","","","","","","","","","","","","","","","","","","","","","","","","cfr_rs::solver","","","cfr_rs::strategy","","","","",""],"d":["Representation of <em>actions</em>","Provide CFR calculations.","Representation of <em>node</em>","Representation of <em>players</em>","Representation of <em>game rule</em>","Provide basic calculations.","Representation of <em>strategy</em> (probability distribution for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculate an ε-Nash strategy","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculate values that are not needed for game definition …","","","","","","","Get the <code>Rule</code> from the JSON string","Get the <code>Rule</code> from the JSON file.","","","","","","","","","","","","","","Calculate the optimal value of the expected value when …","Calculate the expected value.","Calculate NashConv: A common metric for determining the …","","Get the <code>Strategy</code> from the JSON string","Get the <code>Strategy</code> from the JSON file.","Get the <code>Strategy</code> filled with zeros.","","Get a uniform <code>Strategy</code> (taking actions with equal …"],"i":[0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,0,0,0,0,0,3,3,4,3,5,4,3,5,4,3,5,4,3,5,4,5,4,4,3,5,4,3,5,4,3,5,4,3,5,3,4,5,4,5,4,3,5,4,3,5,4,3,5,4,5,4,5,4,5,3,4,3,5,4,3,5,4,3,5,4,3,5,4,3,5,3,6,6,7,8,8,8,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,9,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["actionid",3]],[[],["action",3]],[[]],[[]],[[["actionid",3]],["ordering",4]],[[["action",3]],["ordering",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["actionid",3]],["bool",15]],[[["action",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["actionid",3]],["bool",15]],[[["action",3]],["bool",15]],[[["usize",15]]],[[["str",15]]],[[["actionid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["action",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["str",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15],["rule",3],["strategy",6]],["strategy",6]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["nodeid",3]],[[],["node",4]],[[],["informationsetid",3]],[[]],[[]],[[]],[[["nodeid",3]],["ordering",4]],[[["informationsetid",3]],["ordering",4]],[[],["nodeid",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["btreemap",3]],[[["nodeid",3]],["bool",15]],[[["informationsetid",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["nodeid",3]],["bool",15]],[[["informationsetid",3]],["bool",15]],[[["usize",15]],["nodeid",3]],[[["usize",15]]],[[["nodeid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["informationsetid",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["player",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["f64",15]],null,null,null,null,null,null,null,[[]],[[]],[[],["player",4]],[[]],[[["player",4]],["ordering",4]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["player",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["player",4]],[[["player",4]],[["option",4,["ordering"]],["ordering",4]]],[[],["result",4]],[[],["f64",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[],["rule",3]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[]],[[["str",15]],["rule",3]],[[["str",15]],["rule",3]],null,null,null,[[],["usize",15]],[[]],null,null,null,[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["rule",3],["player",4],["strategy",6]],["f64",15]],[[["rule",3],["strategy",6]],["f64",15]],[[["rule",3],["strategy",6]],["f64",15]],null,[[["str",15]],["strategy",6]],[[["str",15]],["strategy",6]],[[["rule",3]],["strategy",6]],[[["rule",3],["strategy",6]],["string",3]],[[["rule",3]],["strategy",6]]],"p":[[3,"ActionId"],[3,"Action"],[4,"Node"],[3,"NodeId"],[3,"InformationSetId"],[13,"NonTerminal"],[13,"Terminal"],[4,"Player"],[3,"Rule"]]},\
"main":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11,5,11,12,12,11,11,11],"n":["Args","borrow","borrow_mut","deref","deref_mut","drop","from","from_args","init","into","main","redact_arg_values","rule","step","try_from","try_into","type_id"],"q":["main","","","","","","","","","","","","","","","",""],"d":["Calculate ε-Nash Strategy","","","","","","","","","","","","the JSON file path of Game rule","the number of iterations","","",""],"i":[0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1],"f":[null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],[["result",4,["earlyexit"]],["earlyexit",3]]],[[],["usize",15]],[[]],[[]],[[],[["result",4,["vec","earlyexit"]],["vec",3,["string"]],["earlyexit",3]]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Args"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};